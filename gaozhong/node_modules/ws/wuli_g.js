// 加载node上websocket模块 ws;
var ws = require("ws");
var fs = require('fs');
/*redis  初中*/
// let {redisClient, getItem, setItem} = require('./common/redis_c');
/*redis  高中*/
let {redisClient, getItem, setItem} = require('./common/redis_g');

// 启动基于websocket的服务器,监听我们的客户端接入进来。
var server = new ws.Server({port: 6091});



function setware(filename, str) {
    // fs.writeFileSync(filename, str, function (err) {
    //     if (err) console.log('写文件操作失败');
    //     else console.log('写文件操作成功');
    // });
    /*redis写操作*/
    setItem(filename,str);
}


function setwarebyid(author, content, courses, created, description, folderIcon, id, ifOfficial, isFolder, isLogicDeleted, pageNum, parentId, price, properties, status, title, updated, version, viewCount, vip) {





    author = author || '4516288';
    content = content || {};
    courses = courses || [];
    created = created || '2020-05-27T02:21:00.139Z';
    description = description || '';
    folderIcon = folderIcon || '/assets/img/console/theme/default/defaultbg.png';
    id = id || 'deafbhh-ckaoq22k200014c9a44n7gq4i';
    ifOfficial = ifOfficial || 0;
    isFolder = isFolder || 0;
    isLogicDeleted = isLogicDeleted || 0;
    pageNum = pageNum || false;
    parentId = parentId || 0;
    price = price || 0;
    properties = properties || {"extension":".nbpx","folderMenuStyle":{},"class":[],"styles":{},"userInfo":{},"icon":{"url":"","type":"","resourceData":{}}};
    status = status || '0';
    title = title || '无标题1';
    updated = updated || '2020-05-27T02:21:00.139Z';
    version = version || '0';
    viewCount = viewCount || '0';
    vip = vip || '0';



    var warefile = {
        "author": author,
        "content": content,
        "courses": courses,
        "created": created,
        "description": description,
        "folderIcon": folderIcon,
        "id": id,
        "ifOfficial": ifOfficial,
        "isFolder": isFolder,
        "isLogicDeleted": isLogicDeleted,
        "pageNum": pageNum,
        "parentId": parentId,
        "price": price,
        "properties": properties,
        "status": status,
        "title": title,
        "updated": updated,
        "version": version,
        "vip": vip
    }


    setware(id, JSON.stringify(warefile));


}



function changewarebyid(author, content, courses, created, description, folderIcon, id, ifOfficial, isFolder, isLogicDeleted, pageNum, parentId, price, properties, status, title, updated, version, viewCount, vip) {

 console.log('changewarebyid---------'+id+'----------changewarebyid');
    var warejson = null;

    getItem(id).then(data=>{
        warejson = JSON.parse(data);

         var projson = warejson['properties'];
        console.log('err-------------------err');
        if (properties == null || properties == undefined || properties == '' || properties === undefined) { 
            console.log('properties-------------------nonea');
            console.log(warejson);
            properties=warejson['properties'];
        }else{
            console.log('properties-------------------chardata');
            console.log(warejson);
            console.log(properties['chartData']);
        // 信息点注入，动态键值。

            if (properties['postype'] == 1 ) { 

                for( var key in properties['poslist'] ){
                      console.log(key);
                      console.log("projson."+key);
                   // eval('projson.'+key);
                    eval( "projson."+ key +" ="+JSON.stringify(properties['poslist'][key])+"");
                }
           
                 properties = projson;
            }else{
                    
                     properties=properties;
            }
        }




    if (author == null || author == undefined || author == '' || author === undefined) { 

         console.log('authornull-------------------authornull');
          console.log(author);
        author=warejson['author'];
    }else{    

         console.log('author-------------------author');
        author=author;
    }

    if (content == null || content == undefined || content == '' || content === undefined) { 
        content=warejson['content'];
    }else{    
        content=content;
    }

    if (courses == null || courses == undefined || courses == '' || courses === undefined) { 
        courses=warejson['courses'];
    }else{    
        courses=courses;
    }

    if (created == null || created == undefined || created == '' || created === undefined) { 
        created=warejson['created'];
    }else{    
        created=created;
    }

    if (description == null || description == undefined || description == '' || description === undefined) { 
        description=warejson['description'];
    }else{    
        description=description;
    }

   

    if (folderIcon == null || folderIcon == undefined || folderIcon == '' || folderIcon === undefined) { 
        folderIcon=warejson['folderIcon'];
    }else{    
        folderIcon=folderIcon;
    }

    if (id == null || id == undefined || id == '' || id === undefined) { 
        id=warejson['id'];
    }else{    
        id=id;
    }

    if (ifOfficial == null || ifOfficial == undefined || ifOfficial == '' || ifOfficial === undefined) { 
        ifOfficial=warejson['ifOfficial'];
    }else{    
        ifOfficial=ifOfficial;
    }

    if (isFolder == null || isFolder == undefined || isFolder == '' || isFolder === undefined) { 
        isFolder=warejson['isFolder'];
    }else{    
        isFolder=isFolder;
    }

    if (isLogicDeleted == null || isLogicDeleted == undefined || isLogicDeleted == '' || isLogicDeleted === undefined) { 
        isLogicDeleted=warejson['isLogicDeleted'];
    }else{    
        isLogicDeleted=isLogicDeleted;
    }

    if (pageNum == null || pageNum == undefined || pageNum == '' || pageNum === undefined) { 
        pageNum=warejson['pageNum'];
    }else{    
        pageNum=pageNum;
    }

    if (parentId == null || parentId == undefined || parentId == '' || parentId === undefined) { 
        parentId=warejson['parentId'];
    }else{    
        parentId=parentId;
    }

    if (price == null || price == undefined || price == '' || price === undefined) { 
        price=warejson['price'];
    }else{    
        price=price;
    }

    if (status == null || status == undefined || status == '' || status === undefined) { 
        status=warejson['status'];
    }else{    
        status=status;
    }

    if (title == null || title == undefined || title == '' || title === undefined) { 
        title=warejson['title'];
    }else{    
        title=title;
    }

    if (updated == null || updated == undefined || updated == '' || updated === undefined) { 
        updated=warejson['updated'];
    }else{    
        updated=updated;
    }

    if (viewCount == null || viewCount == undefined || viewCount == '' || viewCount === undefined) { 
        viewCount=warejson['viewCount'];
    }else{    
        viewCount=author;
    }

    if (vip == null || vip == undefined || vip == '' || vip === undefined) { 
        vip=warejson['vip'];
    }else{    
        vip=vip;
    }




        


      

       var warefile = {
        "author": author,
        "content": content,
        "courses": courses,
        "created": created,
        "description": description,
        "folderIcon": folderIcon,
        "id": id,
        "ifOfficial": ifOfficial,
        "isFolder": isFolder,
        "isLogicDeleted": isLogicDeleted,
        "pageNum": pageNum,
        "parentId": parentId,
        "price": price,
        "properties": properties,
        "status": status,
        "title": title,
        "updated": updated,
        "version": version,
        "vip": vip
    }
        setware(id, JSON.stringify(warefile));
    }).catch(e=>console.log(e));

}


function setwarebypage(id, author, fileId, created, updated, title, sort, properties, version) {

    id = id || 'dagccic-ck8jfn9mm000a4f74vksasf59';
    author = author || '4173393';
    fileId = fileId || 'dagccic-ck8jfn91k00004f74lu9gt0i8';
    created = created || '2020-04-01T02:12:57.466Z';
    updated = updated || '2020-04-01T02:14:58.239Z';
    title = title || '';
    sort = sort || 1;
    properties = properties || {"animateClass": "animated-fast slideInDown", "styles": [], "animation": "slide"};
    version = version || 1;

    var warefile = {
        "id": id,
        "author": author,
        "fileId": fileId,
        "created": created,
        "updated": updated,
        "title": title,
        "sort": sort,
        "properties": properties,
        "version": version
    }

    setware(id, JSON.stringify(warefile));


}


function changewarebypage(id, author, fileId, created, updated, title, sort, properties, version) {

    var warejson = null;

    getItem(id).then(data=>{
        warejson = JSON.parse(data);

         projson = warejson['properties'];
       
        if (properties == null || properties == undefined || properties == '' || properties === undefined) { 
            console.log('properties---------page----------nonea');
            console.log(warejson);
            properties=warejson['properties'];
        }else{
            console.log('properties----------page---------up');
            console.log(projson);
             console.log(JSON.stringify(properties['poslist']));
    
        // 信息点注入，动态键值。

            if (properties['postype'] == 1 ) { 

                for( var key in properties['poslist'] ){
                      console.log(key);
                      console.log("projson."+key);
                   // eval('projson.'+key);
                   console.log(JSON.stringify(properties['poslist'][key]));
                    eval( "projson."+ key +" = "+JSON.stringify(properties['poslist'][key])+"");
                }
           
                 properties = projson;
            }else{
                    
                     properties=properties;
            }
        }


        id = id || warejson['id'];
        author = author || warejson['author'];
        
        fileId = fileId || warejson['fileId'];
        
        created = created || warejson['created'];
        
        updated = updated || warejson['updated'];
        
        title = title || warejson['title'];
        
        sort = sort || warejson['sort'];
        

        version = version || warejson['version'];
        

        var warefile = {
            "id": id,
            "author": author,
            "fileId": fileId,
            "created": created,
            "updated": updated,
            "title": title,
            "sort": sort,
            "properties": properties,
            "version": version
        }
        setware(id, JSON.stringify(warefile));
    }).catch(e=>console.log(e));

}


function setwarebycomponent(id, fileId, pageId, author, type, template, css, properties, created, updated, version) {

    id = id || 'dagccic-ck8jfpfmw000c4f74tc5mk4ix';
    author = author || '4173393';
    fileId = fileId || 'dagccic-ck8jfn91k00004f74lu9gt0i8';
    pageId = pageId || 'dagccic-ck8jfn9mm000a4f74vksasf59';
    type = type || 1;
    template = template || null;
    created = created || '2020-04-01T02:12:57.466Z';
    updated = updated || '2020-04-01T02:14:58.239Z';
    css = css || {
        "width": 140,
        "height": 57,
        "color": "#000000",
        "left": 692.2784727977037,
        "top": 186.43671789720946,
        "zIndex": 2,
        "visibility": ""
    };
    properties = properties || {
        "autoWidth": 1,
        "canEdit": false,
        "isEditing": false,
        "template": "<div class=\"text-wrapper\"><p>默认文本</p></div>",
        "animations": [],
        "styles": {"fontSize": "30px", "width": "140px"}
    };
    version = version || 1;

    var warefile = {
        "id": id,
        "fileId": fileId,
        "pageId": pageId,
        "author": author,
        "type": type,
        "template": template,
        "css": css,
        "properties": properties,
        "created": "2020-04-03T00:12:58.856Z",
        "updated": "2020-04-08T11:19:49.686Z",
        "version": version
    }

    setware(id, JSON.stringify(warefile));


}

function changewarebycomponent(id, fileId, pageId, author, type, template, css, properties, created, updated, version) {
    var warejson = null;
    var projson = null;






    getItem(id).then(data=>{
        warejson = JSON.parse(data);
        projson = warejson['properties'];
        cssjson = warejson['css'];
        if (css == null || css == undefined || css == '' || css === undefined) { 
            console.log('css-------------------nonea');
            console.log(warejson);
            css=warejson['css'];
        }else{
            console.log('css-------------------cssupdata');
            console.log(warejson);
         
        // css信息点注入，动态键值。

            if (css['csstype'] == 1 ) { 
                console.log('css-------------------insert'+css['csslist']);
                for( var key in css['csslist'] ){
                      console.log(key);
                      console.log("cssjson."+key);
                   // eval('projson.'+key);
                    eval( "cssjson."+ key +" ="+JSON.stringify(css['csslist'][key])+"");
                }
           
                css = cssjson;
            }else{
                    
                css = css;
            }
        }


        if (properties == null || properties == undefined || properties == '' || properties === undefined) { 
            console.log('properties-------------------nonea');
            console.log(warejson);
            properties=warejson['properties'];
        }else{
            console.log('properties-------------------chardata');
            console.log(warejson);
            console.log(properties['chartData']);
        // properties信息点注入，动态键值。

            if (properties['postype'] == 1 ) { 

                for( var key in properties['poslist'] ){
                      console.log(key);
                      console.log("projson."+key);
                   // eval('projson.'+key);
                    eval( "projson."+ key +" ="+JSON.stringify(properties['poslist'][key])+"");
                }
           
                 properties = projson;
            }else{
                    
                     properties=properties;
            }
        }

        id = id || warejson['id'];
        author = author || warejson['author'];
        fileId = fileId || warejson['fileId'];
        pageId = pageId || warejson['pageId'];
        type = type || warejson['type'];
        template = template || warejson['template'];
        created = created || warejson['created'];
        updated = updated || warejson['updated'];
        version = version || warejson['version'];

        var warefile = {
            "id": id,
            "fileId": fileId,
            "pageId": pageId,
            "author": author,
            "type": type,
            "template": template,
            "css": css,
            "properties": properties,
            "created": "2020-04-03T00:12:58.856Z",
            "updated": "2020-04-08T11:19:49.686Z",
            "version": version
        }
        setware(id, JSON.stringify(warefile));
    }).catch(e=>console.log(e));
}


function setarr(str,uid) {
    console.log("uid---------------------"+uid)
    // fs.writeFileSync('./dc.json', str, function (err) {
    //     if (err) console.log('写文件操作失败');
    //     else console.log('写文件操作成功');
    // });

    setItem(uid,str);

}

var sktflag;

var mzkqUid;

var deleteName = null;

// 监听接入进来的客户端事件
function websocket_add_listener(client_sock) {


    // close事件
    client_sock.on("close", function () {
        console.log("client close");
    });
    // error事件
    client_sock.on("error", function (err) {
        console.log("client error", err);
    });
    // end 
    // message 事件, data已经是根据websocket协议解码开来的原始数据；
    // websocket底层有数据包的封包协议，所以，绝对不会出现粘包的情况。
    // 每解一个数据包，就会触发一个message事件;
    // 不会出现粘包的情况，send一次，就会把send的数据独立封包。
    // 如果我们是直接基于TCP，我们要自己实现类似于websocket封包协议就可以完全达到一样的效果；

    client_sock.on("message", function (data) {
        console.log("mzkq--------------------------"+data)

        // var contentText = fs.readFileSync('dc.json', 'utf-8');
        var contentText = "{}";
        contentText = JSON.parse(contentText);
        var did = '';
        //初始化或读取ScienceCourseware
        var reg = RegExp(/"clientSubscribeData","physicsexperimentations"/);
        if (data.match(reg)) {
            var arrs = data.split(",")[1];
            var s = '';
            var index = data.indexOf("\,");
            var jsonstr = data.substring(index + 1, data.length);
            var index2 = jsonstr.indexOf("\[");
            s = jsonstr.substring(0, index2);
            jsonstr = jsonstr.substring(index2, jsonstr.length);
            var jsonarrs = JSON.parse(jsonstr);
            did = jsonarrs[2]['where']['id'];
            sktflag = did;
            console.log("22222---------"+jsonarrs[2]['where']['author'])
            // var contentText = fs.readFileSync('dc.json', 'utf-8');  ``
            // contentText = JSON.parse(contentText);

            getItem(mzkqUid).then(data1=>{
                if (data1 == null){
                    data1 = "{}"
                }
                contentText = JSON.parse(data1);
                if (data.match(/"id":/)) {
                    if (contentText.hasOwnProperty(jsonarrs[2]['where']['id'])) {
                        var pageid = contentText[did]['base'];
                        console.log("不知道干什么:"+data)
                    } else {
                        var temparr4 = {};
                        temparr4['page'] = {};
                        temparr4['base'] = {id: jsonarrs[2]['where']['id'], version: 1};
                        temparr4['component'] = {};
                        contentText[jsonarrs[2]['where']['id']] = temparr4;
                        contentText = JSON.stringify(contentText);
                        console.log("22222---------"+jsonarrs[2]['where']['author'])
                        if(jsonarrs[2]['where']['author'] != undefined){
                            setarr(contentText,jsonarrs[2]['where']['author']);
                        }
                        var pageid = jsonarrs[2]['where']['id'];
                    }


                    var ulist = [];


                    if (contentText.hasOwnProperty(jsonarrs[2]['where']['id'])) {
                        ulist.push({
                            id: jsonarrs[2]['where']['id'],
                            "version": 1
                        });
                    }


                    client_sock.send('43/sync-data/physicsexperimentations,' + s + '[null,' + JSON.stringify(ulist) + ']');


                } else {
                    var ulist = [];
                    for (var x in contentText) {
                        if(contentText[x]['base']!=undefined){
                        ulist.push(contentText[x]['base']);}
                    }

                    client_sock.send('43/sync-data/physicsexperimentations,' + s + '[null,' + JSON.stringify(ulist) + ']');
                }
            }).catch(e=>console.log(e));

        }



        var reg = RegExp(/"clientSubscribeData","ScienceCoursewarePage"/);
        if (data.match(reg)) {
            var arrs = data.split(",")[1];
            var s = '';
            var index = data.indexOf("\,");
            var jsonstr = data.substring(index + 1, data.length);
            var index2 = jsonstr.indexOf("\[");
            s = jsonstr.substring(0, index2);
            jsonstr = jsonstr.substring(index2, jsonstr.length);
            //console.log(s);
            var jsonarrs = JSON.parse(jsonstr);
            did = jsonarrs[2]['where']['fileId'];
            sktflag = did;
            console.log("3333333")
            // var contentText = fs.readFileSync('dc.json', 'utf-8');
            // contentText = JSON.parse(contentText);
            getItem(mzkqUid).then(data1=>{
                if (data1 == null){
                    data1 = "{}"
                }
                contentText = JSON.parse(data1);
                var ulist = [];

                if (contentText.hasOwnProperty(jsonarrs[2]['where']['fileId'])) {
                    for (var x in contentText[did]['page']) {

                        ulist.push(contentText[did]['page'][x]);
                        // console.log(contentText[did]['page'][x]);
                    }
                }
                client_sock.send('43/sync-data/science-coursewares,' + s + '[null,' + JSON.stringify(ulist) + ']');
            }).catch(e=>console.log(e));

        }

        if (data == '2') {
            client_sock.send('3');
        }
        var reg2 = RegExp(/"clientSubscribeData","ScienceCoursewareComponent"/);
        if (data.match(reg2)) {
            var arrs = data.split(",")[1];
            var s = '';
            var index = data.indexOf("\,");
            var jsonstr = data.substring(index + 1, data.length);
            var index2 = jsonstr.indexOf("\[");
            s = jsonstr.substring(0, index2);
            jsonstr = jsonstr.substring(index2, jsonstr.length);
            //console.log(s);
            var jsonarrs = JSON.parse(jsonstr);
            did = jsonarrs[2]['where']['fileId'];
            sktflag = did;
            console.log("4444444")
            // var contentText = fs.readFileSync('dc.json', 'utf-8');
            // contentText = JSON.parse(contentText);
            getItem(mzkqUid).then(data1=>{
                if (data1 == null){
                    data1 = "{}"
                }
                contentText = JSON.parse(data1);
                var ulist = [];
                if (contentText.hasOwnProperty(jsonarrs[2]['where']['fileId'])) {
                    for (var x in contentText[did]['component']) {

                        ulist.push(contentText[did]['component'][x]);
                        // console.log(x);
                    }
                }
                client_sock.send('43/sync-data/science-coursewares,' + s + '[null,' + JSON.stringify(ulist) + ']');
            }).catch(e=>console.log(e));

        }

        var regce = RegExp(/"clientDataChanged"/);
        if (data.match(regce)) {
            var regcereg = RegExp(/"physicsexperimentations"/);
            var regcebase = RegExp(/"baseVersion":0/);
            if (data.match(regcereg)) {
                if (data.match(regcebase)) {
                    if (data.match(/"obj"/)) {
                        var arrs = data.split(",")[1];
                        var s = '';
                        var index = data.indexOf("\,");
                        var jsonstr = data.substring(index + 1, data.length);
                        var index2 = jsonstr.indexOf("\[");
                        s = jsonstr.substring(0, index2);
                        jsonstr = jsonstr.substring(index2, jsonstr.length);
                        var jsonarrs = JSON.parse(jsonstr);
                        // var contentText = fs.readFileSync('dc.json', 'utf-8');
                        // contentText = JSON.parse(contentText);
                        getItem(mzkqUid).then(data1=>{
                            if (data1 == null){
                                data1 = "{}"
                            }
                            contentText = JSON.parse(data1);
                            if (contentText.hasOwnProperty(jsonarrs[1]['key'])) {
                            } else {
                                var objarray = {};
                                objarray['page'] = {};
                                objarray['base'] = {id: jsonarrs[1]['key'], version: 1};
                                objarray['component'] = {};
                                contentText[jsonarrs[1]['key']] = objarray;
                                console.log("新增----"+jsonarrs[1]['obj']['author'])
                                setarr(JSON.stringify(contentText),jsonarrs[1]['obj']['author']);
                                setwarebyid(jsonarrs[1]['obj']['author'],jsonarrs[1]['obj']['content'],jsonarrs[1]['obj']['courses'],jsonarrs[1]['obj']['created'],jsonarrs[1]['obj']['description'],jsonarrs[1]['obj']['folderIcon'],jsonarrs[1]['obj']['id'],jsonarrs[1]['obj']['ifOfficial'],jsonarrs[1]['obj']['isFolder'],jsonarrs[1]['obj']['isLogicDeleted'],jsonarrs[1]['obj']['pageNum'],jsonarrs[1]['obj']['parentId'],jsonarrs[1]['obj']['price'],jsonarrs[1]['obj']['properties'],jsonarrs[1]['obj']['status'],jsonarrs[1]['obj']['title'],jsonarrs[1]['obj']['updated'],jsonarrs[1]['obj']['version'],jsonarrs[1]['obj']['viewCount'],jsonarrs[1]['obj']['vip']);
                            }
                        }).catch(e=>console.log(e));

                        did = jsonarrs[1]['obj']['_local_version'];
                        client_sock.send('43/sync-data/physicsexperimentations,' + s + '[null,{"version":' + did + '}]');
                    }
                }
            }
        }

        var regce2 = RegExp(/"clientDataChanged"/);
        if (data.match(regce2)) {
            var regcereg2 = RegExp(/"mods"/);
            //var regcebase2 = RegExp(/"baseVersion":2/);	
            //if(data.match(regcebase2)){
            if (data.match(regcereg2)) {
                var arrs = data.split(",")[1];
                var s = '';
                var index = data.indexOf("\,");
                var jsonstr = data.substring(index + 1, data.length);
                var index2 = jsonstr.indexOf("\[");
                s = jsonstr.substring(0, index2);
                jsonstr = jsonstr.substring(index2, jsonstr.length);
                var jsonarrs = JSON.parse(jsonstr);
                did = jsonarrs[1]['mods']['_local_version'];
                if (data.match(/"physicsexperimentations"/)) {
                    sktflag = jsonarrs[1]['key'];
                    // var contentText = fs.readFileSync('dc.json', 'utf-8');
                    // contentText = JSON.parse(contentText);
                    getItem(mzkqUid).then(data1=>{
                        if (data1 == null){
                            data1 = "{}"
                        }
                        contentText = JSON.parse(data1);
                        var savejson = {
                            id: '' + jsonarrs[1]['key'] + '',
                            version: parseInt(did)
                        };
                        if (contentText.hasOwnProperty(jsonarrs[1]['key'])) {
                            contentText[jsonarrs[1]['key']]['base'] = {id: jsonarrs[1]['key'], version: parseInt(did)};
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['userId']);
                             //重构数据，后端解析
                            var reg = RegExp(/properties\./);
                            var poslist = {};
                            var postype = 0;
                                    for( var key in jsonarrs[1]['mods'] ){
                               if(reg.exec(key)){
                                var keydemo = key.replace(/\.([0-9])\./ig,"[$1].");
                                poslist[keydemo.substring(keydemo.indexOf('.') + 1, keydemo.length)] = jsonarrs[1]['mods'][key];
                                postype =1;
                                // 包含        
                            }
                               
                            }
                            if(postype==1){
                                jsonarrs[1]['mods']['properties'] = {};
                                jsonarrs[1]['mods']['properties']['postype'] = 1;
                                jsonarrs[1]['mods']['properties']['poslist'] = poslist;
                            }
                            changewarebyid(jsonarrs[1]['mods']['author'],jsonarrs[1]['mods']['content'],jsonarrs[1]['mods']['courses'],jsonarrs[1]['mods']['created'],jsonarrs[1]['mods']['description'],jsonarrs[1]['mods']['folderIcon'],jsonarrs[1]['key'],jsonarrs[1]['mods']['ifOfficial'],jsonarrs[1]['mods']['isFolder'],jsonarrs[1]['mods']['isLogicDeleted'],jsonarrs[1]['mods']['pageNum'],jsonarrs[1]['mods']['parentId'],jsonarrs[1]['mods']['price'],jsonarrs[1]['mods']['properties'],jsonarrs[1]['mods']['status'],jsonarrs[1]['mods']['title'],jsonarrs[1]['mods']['updated'],jsonarrs[1]['mods']['version'],jsonarrs[1]['mods']['viewCount'],jsonarrs[1]['mods']['vip'])

                        } else {
                            var temparr1 = new Array();
                            temparr1['page'] = new Array();
                            temparr1['base'] = {id: jsonarrs[1]['key'], version: parseInt(did)};
                            temparr1['component'] = new Array();
                            temparr1['page'][jsonarrs[1]['key']] = JSON.stringify(jsonarrs[1]);
                            contentText[jsonarrs[1]['key']] = temparr1;
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['userId']);
                             //重构数据，后端解析
                            var reg = RegExp(/properties\./);
                            var poslist = {};
                            var postype = 0;
                                    for( var key in jsonarrs[1]['mods'] ){
                               if(reg.exec(key)){
                                var keydemo = key.replace(/\.([0-9])\./ig,"[$1].");
                                poslist[keydemo.substring(keydemo.indexOf('.') + 1, keydemo.length)] = jsonarrs[1]['mods'][key];
                                postype =1;
                                // 包含        
                            }
                               
                            }
                            if(postype==1){
                                jsonarrs[1]['mods']['properties'] = {};
                                jsonarrs[1]['mods']['properties']['postype'] = 1;
                                jsonarrs[1]['mods']['properties']['poslist'] = poslist;
                            }
                            changewarebyid(jsonarrs[1]['mods']['author'],jsonarrs[1]['mods']['content'],jsonarrs[1]['mods']['courses'],jsonarrs[1]['mods']['created'],jsonarrs[1]['mods']['description'],jsonarrs[1]['mods']['folderIcon'],jsonarrs[1]['key'],jsonarrs[1]['mods']['ifOfficial'],jsonarrs[1]['mods']['isFolder'],jsonarrs[1]['mods']['isLogicDeleted'],jsonarrs[1]['mods']['pageNum'],jsonarrs[1]['mods']['parentId'],jsonarrs[1]['mods']['price'],jsonarrs[1]['mods']['properties'],jsonarrs[1]['mods']['status'],jsonarrs[1]['mods']['title'],jsonarrs[1]['mods']['updated'],jsonarrs[1]['mods']['version'],jsonarrs[1]['mods']['viewCount'],jsonarrs[1]['mods']['vip'])
                        }
                    }).catch(e=>console.log(e));
                }
                if (data.match(/"ScienceCoursewareComponent"/)) {
                    console.log("666666:::"+jsonarrs[1]['userId'])
                    // var contentText = fs.readFileSync('dc.json', 'utf-8');
                    // contentText = JSON.parse(contentText);
                    getItem(mzkqUid).then(data1=>{
                        if (data1 == null){
                            data1 = "{}"
                        }
                        contentText = JSON.parse(data1);
                        if (contentText.hasOwnProperty(sktflag)) {
                            contentText[sktflag]['component'][jsonarrs[1]['key']] = {
                                id: jsonarrs[1]['key'],
                                version: jsonarrs[1]['mods']['_local_version']
                            };
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['userId']);

                            //css重构数据，后端解析
                
                            var cssreg = RegExp(/css\./);
                            var csslist = {};
                            var csstype = 0;



                            //重构数据，后端解析
                            var reg = RegExp(/properties\./);
                            var poslist = {};
                            var postype = 0;
                            for( var key in jsonarrs[1]['mods'] ){
                               if(reg.exec(key)){
                                var keydemo = key.replace(/\.([0-9])\./ig,"[$1].");
                                poslist[keydemo.substring(keydemo.indexOf('.') + 1, keydemo.length)] = jsonarrs[1]['mods'][key];
                                postype =1;
                                // 包含        
                            }
                             if(cssreg.exec(key)){
                                var keydemo = key.replace(/\.([0-9])\./ig,"[$1].");
                                csslist[keydemo.substring(keydemo.indexOf('.') + 1, keydemo.length)] = jsonarrs[1]['mods'][key];
                                csstype =1;
                                // 包含        
                            }
                               
                            }
                            if(postype==1){
                                jsonarrs[1]['mods']['properties'] = {};
                                jsonarrs[1]['mods']['properties']['postype'] = 1;
                                jsonarrs[1]['mods']['properties']['poslist'] = poslist;
                            }
                            if(csstype==1){
                                jsonarrs[1]['mods']['css'] = {};
                                jsonarrs[1]['mods']['css']['csstype'] = 1;
                                jsonarrs[1]['mods']['css']['csslist'] = csslist;
                            }


                   


                    changewarebycomponent(jsonarrs[1]['key'],null,null,null,null,jsonarrs[1]['mods']['template'],jsonarrs[1]['mods']['css'],jsonarrs[1]['mods']['properties'],null,jsonarrs[1]['mods']['updated'],jsonarrs[1]['mods']['_local_version'])
                


                      //      changewarebycomponent(jsonarrs[1]['key'], null, null, null, null, jsonarrs[1]['mods']['template'], jsonarrs[1]['mods']['css'], jsonarrs[1]['mods']['properties'], null, jsonarrs[1]['mods']['updated'], jsonarrs[1]['mods']['_local_version'])
                        }
                    }).catch(e=>console.log(e));
                }
                if (data.match(/"ScienceCoursewarePage"/)) {
                    console.log("777777::"+jsonarrs[1]['userId'])
                    // var contentText = fs.readFileSync('dc.json', 'utf-8');
                    // contentText = JSON.parse(contentText);
                    getItem(mzkqUid).then(data1=>{
                        if (data1 == null){
                            data1 = "{}"
                        }
                        contentText = JSON.parse(data1);
                        if (contentText.hasOwnProperty(sktflag)) {
                            contentText[sktflag]['page'][jsonarrs[1]['key']] = {
                                id: jsonarrs[1]['key'],
                                version: jsonarrs[1]['mods']['_local_version']
                            };
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['userId']);

                                //重构数据，后端解析
                            var reg = RegExp(/properties\./);
                            var poslist = {};
                            var postype = 0;
                                    for( var key in jsonarrs[1]['mods'] ){
                               if(reg.exec(key)){
                                var keydemo = key.replace(/\.([0-9])\./ig,"[$1].");
                                poslist[keydemo.substring(keydemo.indexOf('.') + 1, keydemo.length)] = jsonarrs[1]['mods'][key];
                                postype =1;
                                // 包含        
                            }
                               
                            }
                            if(postype==1){
                                jsonarrs[1]['mods']['properties'] = {};
                                jsonarrs[1]['mods']['properties']['postype'] = 1;
                                jsonarrs[1]['mods']['properties']['poslist'] = poslist;
                            }

                            changewarebypage(jsonarrs[1]['key'], null, null, null, jsonarrs[1]['mods']['updated'], null, null,  jsonarrs[1]['mods']['properties'], jsonarrs[1]['mods']['_local_version'])

                        }
                    }).catch(e=>console.log(e));
                }
                client_sock.send('43/sync-data/physicsexperimentations,' + s + '[null,{"version":' + did + '}]');
            }
            // 删除 42/sync-data/science-coursewares,30["clientDataChanged",{"key":"dagccia-ck9y6q94d00023b72nkbexnpj","baseVersion":3,"source":null,"table":"ScienceCoursewareComponent","type":3,"isUploading":1,"userId":"4173391","rev":30}]
            var regcereg5 = RegExp(/(\"type\"\:2)/);
            if(data.match(regcereg5)){
                var arrs = data.split(",")[1];
                var s = '';
                var index = data.indexOf("\,");
                var jsonstr = data.substring(index + 1, data.length);
                var index2 = jsonstr.indexOf("\[");
                s = jsonstr.substring(0, index2);
                jsonstr = jsonstr.substring(index2, jsonstr.length);
                var jsonarrs = JSON.parse(jsonstr);
                console.log("删除------------删除或者剪切-----------------"+jsonstr)
                if(jsonarrs[1]['type'] == 3){
                    if(jsonarrs[1]['table'] == "physicsexperimentations"){

                        getItem(mzkqUid).then(data1=>{
                        if (data1 == null){
                            data1 = "{}"
                        }
                        contentText = JSON.parse(data1);
                        if (contentText.hasOwnProperty(sktflag)) {
                            delete contentText[jsonarrs[1]['key']];
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['userId']);
                            delItme(jsonarrs[1]['key']);
                        }
                    }).catch(e=>console.log(e));


                    }
                    if(jsonarrs[1]['table'] == "ScienceCoursewarePage"){

                        getItem(mzkqUid).then(data1=>{
                        if (data1 == null){
                            data1 = "{}"
                        }
                        contentText = JSON.parse(data1);
                        if (contentText.hasOwnProperty(sktflag)) {
                            delete contentText[sktflag]['page'][jsonarrs[1]['key']];
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['userId']);
                            delItme(jsonarrs[1]['key']);
                        }
                    }).catch(e=>console.log(e));

                    }
                    if(jsonarrs[1]['table'] == "ScienceCoursewareComponent"){


                    getItem(mzkqUid).then(data1=>{
                        if (data1 == null){
                            data1 = "{}"
                        }
                        contentText = JSON.parse(data1);
                        if (contentText.hasOwnProperty(sktflag)) {
                            delete contentText[sktflag]['component'][jsonarrs[1]['key']];
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['userId']);
                            delItme(jsonarrs[1]['key']);
                        }
                    }).catch(e=>console.log(e));
                    }


                        
                    var userid = jsonarrs[1]['userId'];
                    var key = jsonarrs[1]['key'];
                    deleteName = key;
                    /*准备进行假删除*/
                    did = jsonarrs[1]['baseVersion']
                    client_sock.send('43/sync-data/science-coursewares,' + s + '[null,{"version":' + did + '}]');
                }

            }
        }
        //42/sync-data/science-coursewares,4["clientDataChanged",{"key":"dagccic-ck8ioiv9p00064f746881yn7y","baseVersion":0,"source":null,"table":"ScienceCoursewarePage","type":1,"obj":{"author":"4173393","fileId":"dagccic-ck8ioiumh00004f748vm24s5r","sort":1,"updated":"2020-04-02T11:32:02.892Z","created":"2020-04-02T11:32:02.892Z","version":0,"_local_version":1,"_sync_version":0,"id":"dagccic-ck8ioiv9p00064f746881yn7y","title":"","properties":{"animateClass":"animated-fast slideInDown","animation":"slide"}},"isUploading":1,"userId":"4173393","rev":65}]
        var regv = RegExp(/"table":"ScienceCoursewarePage"/);
        if (data.match(regv)) {
            if (!data.match(/"mods"/)) {
                if (data.match(/"obj"/)) {
                    var arrs = data.split(",")[1];
                    var s = arrs.substr(0, 1);
                    var index = data.indexOf("\,");
                    var jsonstr = data.substring(index + 1, data.length);
                    var index2 = jsonstr.indexOf("\[");
                    s = jsonstr.substring(0, index2);
                    jsonstr = jsonstr.substring(index2, jsonstr.length);
                    var jsonarrs = JSON.parse(jsonstr);
                    did = jsonarrs[1]['obj']['_local_version'];
                    console.log("88888888")
                    // var contentText = fs.readFileSync('dc.json', 'utf-8');
                    // contentText = JSON.parse(contentText);
                    var savejson = [{
                        id: '' + jsonarrs[1]['key'] + '',
                        version: '' + did + ''
                    }];
                    getItem(mzkqUid).then(data1=>{
                        if (data1 == null){
                            data1 = "{}"
                        }
                        contentText = JSON.parse(data1);
                        if (contentText.hasOwnProperty(jsonarrs[1]['obj']['fileId'])) {
                            contentText[jsonarrs[1]['obj']['fileId']]['page'][jsonarrs[1]['obj']['id']] = {
                                id: jsonarrs[1]['obj']['id'],
                                version: jsonarrs[1]['obj']['_local_version']
                            };
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['obj']['author']);
                            setwarebypage(jsonarrs[1]['obj']['id'], jsonarrs[1]['obj']['author'], jsonarrs[1]['obj']['fileId'], jsonarrs[1]['obj']['created'], jsonarrs[1]['obj']['updated'], jsonarrs[1]['obj']['title'], jsonarrs[1]['obj']['sort'], jsonarrs[1]['obj']['properties'], jsonarrs[1]['obj']['_local_version'])
                        } else {
                            temparr2 = {};
                            temparr2['page'] = {};
                            temparr2['base'] = jsonarrs[1]['obj']['fileId'];
                            temparr2['component'] = {};
                            temparr2['page'][jsonarrs[1]['obj']['id']] = {
                                id: jsonarrs[1]['obj']['id'],
                                version: jsonarrs[1]['obj']['_local_version']
                            };
                            contentText[jsonarrs[1]['obj']['fileId']] = temparr2;
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['obj']['author']);
                            setwarebypage(jsonarrs[1]['obj']['id'], jsonarrs[1]['obj']['author'], jsonarrs[1]['obj']['fileId'], jsonarrs[1]['obj']['created'], jsonarrs[1]['obj']['updated'], jsonarrs[1]['obj']['title'], jsonarrs[1]['obj']['sort'], jsonarrs[1]['obj']['properties'], jsonarrs[1]['obj']['_local_version'])
                        }
                        client_sock.send('43/sync-data/science-coursewares,' + s + '[null,{"version":1}]');
                    }).catch(e=>console.log(e));
                }
            }
        }
        var regCom = RegExp(/"table":"ScienceCoursewareComponent"/);
        if (data.match(regCom)) {
            if (!data.match(/"mods"/)) {
                if (data.match(/"obj"/)) {
                    var arrs = data.split(",")[1];
                    var s = arrs.substr(0, 1);
                    var index = data.indexOf("\,");
                    var jsonstr = data.substring(index + 1, data.length);
                    var index2 = jsonstr.indexOf("\[");
                    s = jsonstr.substring(0, index2);
                    jsonstr = jsonstr.substring(index2, jsonstr.length);
                    var jsonarrs = JSON.parse(jsonstr);
                    did = jsonarrs[1]['obj']['_local_version'];
                    console.log("999999:::"+jsonarrs[1]['obj']['author'])
                    var savejson = [{
                        id: '' + jsonarrs[1]['key'] + '',
                        version: '' + did + ''
                    }];
                    // var contentText = fs.readFileSync('dc.json', 'utf-8');
                    // contentText = JSON.parse(contentText);
                    getItem(mzkqUid).then(data1=>{
                        if (data1 == null){
                            data1 = "{}"
                        }
                        contentText = JSON.parse(data1);
                        if (contentText.hasOwnProperty(jsonarrs[1]['obj']['fileId'])) {
                            contentText[jsonarrs[1]['obj']['fileId']]['component'][jsonarrs[1]['obj']['id']] = {
                                id: jsonarrs[1]['obj']['id'],
                                version: jsonarrs[1]['obj']['_local_version']
                            };
                            contentText = JSON.stringify(contentText);
                            setarr(contentText,jsonarrs[1]['obj']['author']);
                            setwarebycomponent(jsonarrs[1]['obj']['id'], jsonarrs[1]['obj']['fileId'], jsonarrs[1]['obj']['pageId'], jsonarrs[1]['obj']['author'], jsonarrs[1]['obj']['type'], jsonarrs[1]['obj']['template'], jsonarrs[1]['obj']['css'], jsonarrs[1]['obj']['properties'], jsonarrs[1]['obj']['created'], jsonarrs[1]['obj']['updated'], jsonarrs[1]['obj']['_local_version'])
                        } else {
                            var temparr3 = {};
                            temparr3['page'] = {};
                            temparr3['base'] = jsonarrs[1]['obj']['fileId'];
                            temparr3['component'] = {};
                            temparr3['component'][jsonarrs[1]['obj']['id']] = {
                                id: jsonarrs[1]['obj']['id'],
                                version: jsonarrs[1]['obj']['_local_version']
                            };

                            contentText[jsonarrs[1]['obj']['fileId']] = temparr3;
                            contentText = JSON.stringify(contentText);
                            setarr(contentText, jsonarrs[1]['obj']['author']);
                            setwarebycomponent(jsonarrs[1]['obj']['id'], jsonarrs[1]['obj']['fileId'], jsonarrs[1]['obj']['pageId'], jsonarrs[1]['obj']['author'], jsonarrs[1]['obj']['type'], jsonarrs[1]['obj']['template'], jsonarrs[1]['obj']['css'], jsonarrs[1]['obj']['properties'], jsonarrs[1]['obj']['created'], jsonarrs[1]['obj']['updated'], jsonarrs[1]['obj']['_local_version'])
                        }
                        //contentText[jsonarrs[1]['obj']['fileId']]['page'] = savejson;
                        //	contentText = JSON.stringify(contentText);
                        //setarr(contentText);
                        // console.log(s);
                        client_sock.send('43/sync-data/science-coursewares,' + s + '[null,{"version":1}]');
                    }).catch(e=>console.log(e));
                }
            }
        }
        var regb = RegExp(/"baseVersion":1/);
        if (data.match(regb)) {
            if (!data.match(/"mods"/)) {
                var arrs = data.split(",")[1];
                var s = arrs.substr(0, 1);
                // console.log(s);
                client_sock.send('43/sync-data/science-coursewares,' + s + '[null,{"version":2}]');
            }
        }


        var regbyid = RegExp(/"clientRequestFullDataById","physicsexperimentations"/);
        if (data.match(regbyid)) {
            // console.log('runbbbbbbbbbbbbbbbbbbbbbbbbyyyyyyyyyyyyyyyyyyyyyyyyyyyyyid');
            var arrs = data.split(",")[1];
            var s = arrs.substr(0, 1);
            var index = data.indexOf("\,");
            var jsonstr = data.substring(index + 1, data.length);
            var index2 = jsonstr.indexOf("\[");
            s = jsonstr.substring(0, index2);
            jsonstr = jsonstr.substring(index2, jsonstr.length);

            var jsonarrs = JSON.parse(jsonstr);
            var warejson = null;

            getItem(jsonarrs[2]).then(data=>{
                warejson =data
                client_sock.send('43/sync-data/physicsexperimentations,' + s + '[null,' + warejson + ']');
            }).catch(e=>console.log(e));
        }

         var modbyid = RegExp(/"clientRequestModifyById","physicsexperimentations"/);
        if (data.match(modbyid)) {
            // console.log('runbbbbbbbbbbbbbbbbbbbbbbbbyyyyyyyyyyyyyyyyyyyyyyyyyyyyyid');
            var arrs = data.split(",")[1];
            var s = arrs.substr(0, 1);
            var index = data.indexOf("\,");
            var jsonstr = data.substring(index + 1, data.length);
            var index2 = jsonstr.indexOf("\[");
            s = jsonstr.substring(0, index2);
            jsonstr = jsonstr.substring(index2, jsonstr.length);

            var jsonarrs = JSON.parse(jsonstr);
            var warejson = null;

            getItem(jsonarrs[2]).then(data=>{
                warejson =data
                client_sock.send('43/sync-data/physicsexperimentations,' + s + '[null,' + warejson + ']');
            }).catch(e=>console.log(e));
        }


        var regbyidpage = RegExp(/"clientRequestFullDataById","ScienceCoursewarePage"/);
        if (data.match(regbyidpage)) {
            // console.log('runbbbbbbbbbbbbbbbbbbbbbbbbyyyyyyyyyyyyyyyyyyyyyyyyyyyyyid');
            var arrs = data.split(",")[1];
            var s = arrs.substr(0, 1);
            var index = data.indexOf("\,");
            var jsonstr = data.substring(index + 1, data.length);
            var index2 = jsonstr.indexOf("\[");
            s = jsonstr.substring(0, index2);
            jsonstr = jsonstr.substring(index2, jsonstr.length);

            var jsonarrs = JSON.parse(jsonstr);
            var warejson = null;

            getItem(jsonarrs[2]).then(data=>{
                warejson =data
                client_sock.send('43/sync-data/science-coursewares,' + s + '[null,' + warejson + ']');
            }).catch(e=>console.log(e));
        }


        var regbyidcom = RegExp(/"clientRequestFullDataById","ScienceCoursewareComponent"/);
        if (data.match(regbyidcom)) {
            // console.log('runbbbbbbbbbbbbbbbbbbbbbbbbyyyyyyyyyyyyyyyyyyyyyyyyyyyyyid');
            var arrs = data.split(",")[1];
            var s = arrs.substr(0, 1);
            var index = data.indexOf("\,");
            var jsonstr = data.substring(index + 1, data.length);
            var index2 = jsonstr.indexOf("\[");
            s = jsonstr.substring(0, index2);
            jsonstr = jsonstr.substring(index2, jsonstr.length);

            var jsonarrs = JSON.parse(jsonstr);
            var warejson = null;
            getItem(jsonarrs[2]).then(data=>{
                warejson =data
                client_sock.send('43/sync-data/science-coursewares,' + s + '[null,' + warejson + ']');
            }).catch(e=>console.log(e));
        }


    
        // if (data == '40/sync-data/physicsexperimentations?uid=4516288&companyId=&token=xh6uSG9QuT9biXqITP9JT9CnASpV06qF9e6JQRwe,') {
        //       console.log("自动登录")
        //     mzkqUid = 4516288;
        //     client_sock.send('40');
        //     client_sock.send('40/sync-data/physicsexperimentations,');
        // }
        if(data.indexOf("40/sync-data/physicsexperimentations?uid=") != -1)
        {
            console.log("自动登录")
            var arr  = data.split('40/sync-data/physicsexperimentations?uid=')
            var arr1 = arr[1].split("&companyId=&token=");
            console.log(arr1[0])
            mzkqUid = arr1[0];
            // mzkqUid = 4516288;
            client_sock.send('40');
            client_sock.send('40/sync-data/physicsexperimentations,');
        }
       
    });
    // end 
}

// connection 事件, 有客户端接入进来;
function on_server_client_comming(client_sock) {
    console.log("client comming");
    client_sock.send('0{"sid":"Qez4gSNHcnlKpkfdAluJ","upgrades":[],"pingInterval":25000,"pingTimeout":5000}');
    websocket_add_listener(client_sock);
}

server.on("connection", on_server_client_comming);
console.log('client connected');

// error事件,表示的我们监听错误;
function on_server_listen_error(err) {
    console.log(err);
}

server.on("error", on_server_listen_error);

// headers事件, 回给客户端的字符。
function on_server_headers(data) {
    // console.log(data);
}

server.on("headers", on_server_headers);